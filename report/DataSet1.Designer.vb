'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8009
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tabledtInvoice As dtInvoiceDataTable
    
    Private tabledtInvoiceH As dtInvoiceHDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoiceDataTable(ds.Tables("dtInvoice")))
            End If
            If (Not (ds.Tables("dtInvoiceH")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoiceHDataTable(ds.Tables("dtInvoiceH")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInvoice() As dtInvoiceDataTable
        Get
            Return Me.tabledtInvoice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInvoiceH() As dtInvoiceHDataTable
        Get
            Return Me.tabledtInvoiceH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtInvoice")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoiceDataTable(ds.Tables("dtInvoice")))
            End If
            If (Not (ds.Tables("dtInvoiceH")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvoiceHDataTable(ds.Tables("dtInvoiceH")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtInvoice = CType(MyBase.Tables("dtInvoice"),dtInvoiceDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInvoice) Is Nothing) Then
                Me.tabledtInvoice.InitVars
            End If
        End If
        Me.tabledtInvoiceH = CType(MyBase.Tables("dtInvoiceH"),dtInvoiceHDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInvoiceH) Is Nothing) Then
                Me.tabledtInvoiceH.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtInvoice = New dtInvoiceDataTable
        MyBase.Tables.Add(Me.tabledtInvoice)
        Me.tabledtInvoiceH = New dtInvoiceHDataTable
        MyBase.Tables.Add(Me.tabledtInvoiceH)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInvoice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInvoiceH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtInvoiceRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInvoiceRowChangeEvent)
    
    Public Delegate Sub dtInvoiceHRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInvoiceHRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInvoiceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDELNO As Global.System.Data.DataColumn
        
        Private columnDELDT As Global.System.Data.DataColumn
        
        Private columnCUST As Global.System.Data.DataColumn
        
        Private columnMAKER As Global.System.Data.DataColumn
        
        Private columnSHPTO As Global.System.Data.DataColumn
        
        Private columnITEM As Global.System.Data.DataColumn
        
        Private columnMODEL As Global.System.Data.DataColumn
        
        Private columnPDNO As Global.System.Data.DataColumn
        
        Private columnPDCHG As Global.System.Data.DataColumn
        
        Private columnPDQTY As Global.System.Data.DataColumn
        
        Private columnLOTNO As Global.System.Data.DataColumn
        
        Private columnSETNO As Global.System.Data.DataColumn
        
        Private columnUPACK As Global.System.Data.DataColumn
        
        Private columnBXQTY As Global.System.Data.DataColumn
        
        Private columnREMARK As Global.System.Data.DataColumn
        
        Private columnINVNO As Global.System.Data.DataColumn
        
        Private columnTRUCK As Global.System.Data.DataColumn
        
        Private columnDRIVER As Global.System.Data.DataColumn
        
        Private columnaddr1 As Global.System.Data.DataColumn
        
        Private columnaddr21 As Global.System.Data.DataColumn
        
        Private columnaddr22 As Global.System.Data.DataColumn
        
        Private columnaddr23 As Global.System.Data.DataColumn
        
        Private columnaddr31 As Global.System.Data.DataColumn
        
        Private columnaddr32 As Global.System.Data.DataColumn
        
        Private columnCPOST As Global.System.Data.DataColumn
        
        Private columnMPPRC As Global.System.Data.DataColumn
        
        Private columnPALLETNO As Global.System.Data.DataColumn
        
        Private columnCTAXID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInvoice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAKERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAKER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHPTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHPTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDCHGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDCHG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SETNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSETNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UPACKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPACK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BXQTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBXQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMARK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRUCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRUCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DRIVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDRIVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr21Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr21
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr23Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr23
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr31Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr31
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addr32Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddr32
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPPRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPPRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PALLETNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPALLETNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTAXIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTAXID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInvoiceRow
            Get
                Return CType(Me.Rows(index),dtInvoiceRow)
            End Get
        End Property
        
        Public Event dtInvoiceRowChanging As dtInvoiceRowChangeEventHandler
        
        Public Event dtInvoiceRowChanged As dtInvoiceRowChangeEventHandler
        
        Public Event dtInvoiceRowDeleting As dtInvoiceRowChangeEventHandler
        
        Public Event dtInvoiceRowDeleted As dtInvoiceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInvoiceRow(ByVal row As dtInvoiceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInvoiceRow( _
                    ByVal DELNO As String,  _
                    ByVal DELDT As Integer,  _
                    ByVal CUST As String,  _
                    ByVal MAKER As String,  _
                    ByVal SHPTO As String,  _
                    ByVal ITEM As Integer,  _
                    ByVal MODEL As String,  _
                    ByVal PDNO As String,  _
                    ByVal PDCHG As String,  _
                    ByVal PDQTY As Integer,  _
                    ByVal LOTNO As String,  _
                    ByVal SETNO As String,  _
                    ByVal UPACK As Integer,  _
                    ByVal BXQTY As Integer,  _
                    ByVal REMARK As String,  _
                    ByVal INVNO As String,  _
                    ByVal TRUCK As String,  _
                    ByVal DRIVER As String,  _
                    ByVal addr1 As String,  _
                    ByVal addr21 As String,  _
                    ByVal addr22 As String,  _
                    ByVal addr23 As String,  _
                    ByVal addr31 As String,  _
                    ByVal addr32 As String,  _
                    ByVal CPOST As String,  _
                    ByVal MPPRC As Decimal,  _
                    ByVal PALLETNO As String,  _
                    ByVal CTAXID As String) As dtInvoiceRow
            Dim rowdtInvoiceRow As dtInvoiceRow = CType(Me.NewRow,dtInvoiceRow)
            Dim columnValuesArray() As Object = New Object() {DELNO, DELDT, CUST, MAKER, SHPTO, ITEM, MODEL, PDNO, PDCHG, PDQTY, LOTNO, SETNO, UPACK, BXQTY, REMARK, INVNO, TRUCK, DRIVER, addr1, addr21, addr22, addr23, addr31, addr32, CPOST, MPPRC, PALLETNO, CTAXID}
            rowdtInvoiceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInvoiceRow)
            Return rowdtInvoiceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInvoiceDataTable = CType(MyBase.Clone,dtInvoiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInvoiceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDELNO = MyBase.Columns("DELNO")
            Me.columnDELDT = MyBase.Columns("DELDT")
            Me.columnCUST = MyBase.Columns("CUST")
            Me.columnMAKER = MyBase.Columns("MAKER")
            Me.columnSHPTO = MyBase.Columns("SHPTO")
            Me.columnITEM = MyBase.Columns("ITEM")
            Me.columnMODEL = MyBase.Columns("MODEL")
            Me.columnPDNO = MyBase.Columns("PDNO")
            Me.columnPDCHG = MyBase.Columns("PDCHG")
            Me.columnPDQTY = MyBase.Columns("PDQTY")
            Me.columnLOTNO = MyBase.Columns("LOTNO")
            Me.columnSETNO = MyBase.Columns("SETNO")
            Me.columnUPACK = MyBase.Columns("UPACK")
            Me.columnBXQTY = MyBase.Columns("BXQTY")
            Me.columnREMARK = MyBase.Columns("REMARK")
            Me.columnINVNO = MyBase.Columns("INVNO")
            Me.columnTRUCK = MyBase.Columns("TRUCK")
            Me.columnDRIVER = MyBase.Columns("DRIVER")
            Me.columnaddr1 = MyBase.Columns("addr1")
            Me.columnaddr21 = MyBase.Columns("addr21")
            Me.columnaddr22 = MyBase.Columns("addr22")
            Me.columnaddr23 = MyBase.Columns("addr23")
            Me.columnaddr31 = MyBase.Columns("addr31")
            Me.columnaddr32 = MyBase.Columns("addr32")
            Me.columnCPOST = MyBase.Columns("CPOST")
            Me.columnMPPRC = MyBase.Columns("MPPRC")
            Me.columnPALLETNO = MyBase.Columns("PALLETNO")
            Me.columnCTAXID = MyBase.Columns("CTAXID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDELNO = New Global.System.Data.DataColumn("DELNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELNO)
            Me.columnDELDT = New Global.System.Data.DataColumn("DELDT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELDT)
            Me.columnCUST = New Global.System.Data.DataColumn("CUST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST)
            Me.columnMAKER = New Global.System.Data.DataColumn("MAKER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAKER)
            Me.columnSHPTO = New Global.System.Data.DataColumn("SHPTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHPTO)
            Me.columnITEM = New Global.System.Data.DataColumn("ITEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM)
            Me.columnMODEL = New Global.System.Data.DataColumn("MODEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL)
            Me.columnPDNO = New Global.System.Data.DataColumn("PDNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDNO)
            Me.columnPDCHG = New Global.System.Data.DataColumn("PDCHG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDCHG)
            Me.columnPDQTY = New Global.System.Data.DataColumn("PDQTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDQTY)
            Me.columnLOTNO = New Global.System.Data.DataColumn("LOTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOTNO)
            Me.columnSETNO = New Global.System.Data.DataColumn("SETNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSETNO)
            Me.columnUPACK = New Global.System.Data.DataColumn("UPACK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPACK)
            Me.columnBXQTY = New Global.System.Data.DataColumn("BXQTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBXQTY)
            Me.columnREMARK = New Global.System.Data.DataColumn("REMARK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARK)
            Me.columnINVNO = New Global.System.Data.DataColumn("INVNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVNO)
            Me.columnTRUCK = New Global.System.Data.DataColumn("TRUCK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRUCK)
            Me.columnDRIVER = New Global.System.Data.DataColumn("DRIVER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDRIVER)
            Me.columnaddr1 = New Global.System.Data.DataColumn("addr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr1)
            Me.columnaddr21 = New Global.System.Data.DataColumn("addr21", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr21)
            Me.columnaddr22 = New Global.System.Data.DataColumn("addr22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr22)
            Me.columnaddr23 = New Global.System.Data.DataColumn("addr23", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr23)
            Me.columnaddr31 = New Global.System.Data.DataColumn("addr31", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr31)
            Me.columnaddr32 = New Global.System.Data.DataColumn("addr32", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddr32)
            Me.columnCPOST = New Global.System.Data.DataColumn("CPOST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPOST)
            Me.columnMPPRC = New Global.System.Data.DataColumn("MPPRC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPPRC)
            Me.columnPALLETNO = New Global.System.Data.DataColumn("PALLETNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPALLETNO)
            Me.columnCTAXID = New Global.System.Data.DataColumn("CTAXID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTAXID)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInvoiceRow() As dtInvoiceRow
            Return CType(Me.NewRow,dtInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInvoiceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInvoiceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInvoiceRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInvoiceRowChanged(Me, New dtInvoiceRowChangeEvent(CType(e.Row,dtInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInvoiceRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInvoiceRowChanging(Me, New dtInvoiceRowChangeEvent(CType(e.Row,dtInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInvoiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInvoiceRowDeleted(Me, New dtInvoiceRowChangeEvent(CType(e.Row,dtInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInvoiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInvoiceRowDeleting(Me, New dtInvoiceRowChangeEvent(CType(e.Row,dtInvoiceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInvoiceRow(ByVal row As dtInvoiceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInvoiceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInvoiceHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINVNO As Global.System.Data.DataColumn
        
        Private columnCUST As Global.System.Data.DataColumn
        
        Private columnINVDATE As Global.System.Data.DataColumn
        
        Private columnADDR1 As Global.System.Data.DataColumn
        
        Private columnADDR2 As Global.System.Data.DataColumn
        
        Private columnADDR3 As Global.System.Data.DataColumn
        
        Private columnTAXNO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInvoiceH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDR3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDR3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInvoiceHRow
            Get
                Return CType(Me.Rows(index),dtInvoiceHRow)
            End Get
        End Property
        
        Public Event dtInvoiceHRowChanging As dtInvoiceHRowChangeEventHandler
        
        Public Event dtInvoiceHRowChanged As dtInvoiceHRowChangeEventHandler
        
        Public Event dtInvoiceHRowDeleting As dtInvoiceHRowChangeEventHandler
        
        Public Event dtInvoiceHRowDeleted As dtInvoiceHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInvoiceHRow(ByVal row As dtInvoiceHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInvoiceHRow(ByVal INVNO As String, ByVal CUST As String, ByVal INVDATE As Integer, ByVal ADDR1 As String, ByVal ADDR2 As String, ByVal ADDR3 As String, ByVal TAXNO As String) As dtInvoiceHRow
            Dim rowdtInvoiceHRow As dtInvoiceHRow = CType(Me.NewRow,dtInvoiceHRow)
            Dim columnValuesArray() As Object = New Object() {INVNO, CUST, INVDATE, ADDR1, ADDR2, ADDR3, TAXNO}
            rowdtInvoiceHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInvoiceHRow)
            Return rowdtInvoiceHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInvoiceHDataTable = CType(MyBase.Clone,dtInvoiceHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInvoiceHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVNO = MyBase.Columns("INVNO")
            Me.columnCUST = MyBase.Columns("CUST")
            Me.columnINVDATE = MyBase.Columns("INVDATE")
            Me.columnADDR1 = MyBase.Columns("ADDR1")
            Me.columnADDR2 = MyBase.Columns("ADDR2")
            Me.columnADDR3 = MyBase.Columns("ADDR3")
            Me.columnTAXNO = MyBase.Columns("TAXNO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVNO = New Global.System.Data.DataColumn("INVNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVNO)
            Me.columnCUST = New Global.System.Data.DataColumn("CUST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST)
            Me.columnINVDATE = New Global.System.Data.DataColumn("INVDATE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVDATE)
            Me.columnADDR1 = New Global.System.Data.DataColumn("ADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR1)
            Me.columnADDR2 = New Global.System.Data.DataColumn("ADDR2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR2)
            Me.columnADDR3 = New Global.System.Data.DataColumn("ADDR3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDR3)
            Me.columnTAXNO = New Global.System.Data.DataColumn("TAXNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXNO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInvoiceHRow() As dtInvoiceHRow
            Return CType(Me.NewRow,dtInvoiceHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInvoiceHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInvoiceHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInvoiceHRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInvoiceHRowChanged(Me, New dtInvoiceHRowChangeEvent(CType(e.Row,dtInvoiceHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInvoiceHRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInvoiceHRowChanging(Me, New dtInvoiceHRowChangeEvent(CType(e.Row,dtInvoiceHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInvoiceHRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInvoiceHRowDeleted(Me, New dtInvoiceHRowChangeEvent(CType(e.Row,dtInvoiceHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInvoiceHRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInvoiceHRowDeleting(Me, New dtInvoiceHRowChangeEvent(CType(e.Row,dtInvoiceHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInvoiceHRow(ByVal row As dtInvoiceHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInvoiceHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInvoiceRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInvoice As dtInvoiceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInvoice = CType(Me.Table,dtInvoiceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.DELNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.DELNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELDT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.DELDTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELDT' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.DELDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.CUSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.CUSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAKER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.MAKERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAKER' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.MAKERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHPTO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.SHPTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHPTO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.SHPTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.ITEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.ITEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODEL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.MODELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODEL' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.MODELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.PDNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.PDNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDCHG() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.PDCHGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDCHG' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.PDCHGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDQTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.PDQTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDQTY' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.PDQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.LOTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOTNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.LOTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SETNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.SETNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SETNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.SETNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UPACK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.UPACKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPACK' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.UPACKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BXQTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.BXQTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BXQTY' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.BXQTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.REMARKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMARK' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.REMARKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.INVNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.INVNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRUCK() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.TRUCKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRUCK' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.TRUCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DRIVER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.DRIVERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DRIVER' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.DRIVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr1' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr21() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr21Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr21' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr21Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr22() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr22' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr23() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr23Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr23' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr23Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr31() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr31Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr31' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr31Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property addr32() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.addr32Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'addr32' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.addr32Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPOST() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.CPOSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CPOST' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.CPOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPPRC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.MPPRCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPPRC' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.MPPRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PALLETNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.PALLETNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PALLETNO' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.PALLETNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTAXID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoice.CTAXIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTAXID' in table 'dtInvoice' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoice.CTAXIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.DELNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELNONull()
            Me(Me.tabledtInvoice.DELNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELDTNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.DELDTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELDTNull()
            Me(Me.tabledtInvoice.DELDTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.CUSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTNull()
            Me(Me.tabledtInvoice.CUSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAKERNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.MAKERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAKERNull()
            Me(Me.tabledtInvoice.MAKERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHPTONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.SHPTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHPTONull()
            Me(Me.tabledtInvoice.SHPTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.ITEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMNull()
            Me(Me.tabledtInvoice.ITEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODELNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.MODELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODELNull()
            Me(Me.tabledtInvoice.MODELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.PDNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDNONull()
            Me(Me.tabledtInvoice.PDNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDCHGNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.PDCHGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDCHGNull()
            Me(Me.tabledtInvoice.PDCHGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDQTYNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.PDQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDQTYNull()
            Me(Me.tabledtInvoice.PDQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOTNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.LOTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOTNONull()
            Me(Me.tabledtInvoice.LOTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSETNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.SETNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSETNONull()
            Me(Me.tabledtInvoice.SETNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUPACKNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.UPACKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUPACKNull()
            Me(Me.tabledtInvoice.UPACKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBXQTYNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.BXQTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBXQTYNull()
            Me(Me.tabledtInvoice.BXQTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.REMARKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKNull()
            Me(Me.tabledtInvoice.REMARKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.INVNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVNONull()
            Me(Me.tabledtInvoice.INVNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRUCKNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.TRUCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRUCKNull()
            Me(Me.tabledtInvoice.TRUCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDRIVERNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.DRIVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDRIVERNull()
            Me(Me.tabledtInvoice.DRIVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr1Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr1Null()
            Me(Me.tabledtInvoice.addr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr21Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr21Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr21Null()
            Me(Me.tabledtInvoice.addr21Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr22Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr22Null()
            Me(Me.tabledtInvoice.addr22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr23Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr23Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr23Null()
            Me(Me.tabledtInvoice.addr23Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr31Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr31Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr31Null()
            Me(Me.tabledtInvoice.addr31Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaddr32Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.addr32Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaddr32Null()
            Me(Me.tabledtInvoice.addr32Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPOSTNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.CPOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPOSTNull()
            Me(Me.tabledtInvoice.CPOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPPRCNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.MPPRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPPRCNull()
            Me(Me.tabledtInvoice.MPPRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPALLETNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.PALLETNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPALLETNONull()
            Me(Me.tabledtInvoice.PALLETNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTAXIDNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoice.CTAXIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTAXIDNull()
            Me(Me.tabledtInvoice.CTAXIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInvoiceHRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInvoiceH As dtInvoiceHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInvoiceH = CType(Me.Table,dtInvoiceHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.INVNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVNO' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.INVNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.CUSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.CUSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVDATE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.INVDATEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVDATE' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.INVDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.ADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR1' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.ADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.ADDR2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR2' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.ADDR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDR3() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.ADDR3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDR3' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.ADDR3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAXNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvoiceH.TAXNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXNO' in table 'dtInvoiceH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvoiceH.TAXNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.INVNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVNONull()
            Me(Me.tabledtInvoiceH.INVNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUSTNull() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.CUSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUSTNull()
            Me(Me.tabledtInvoiceH.CUSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVDATENull() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.INVDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVDATENull()
            Me(Me.tabledtInvoiceH.INVDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR1Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.ADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR1Null()
            Me(Me.tabledtInvoiceH.ADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR2Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.ADDR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR2Null()
            Me(Me.tabledtInvoiceH.ADDR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDR3Null() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.ADDR3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDR3Null()
            Me(Me.tabledtInvoiceH.ADDR3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXNONull() As Boolean
            Return Me.IsNull(Me.tabledtInvoiceH.TAXNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXNONull()
            Me(Me.tabledtInvoiceH.TAXNOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInvoiceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInvoiceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInvoiceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInvoiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInvoiceHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInvoiceHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInvoiceHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInvoiceHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
